# -*- mode: ruby -*-
# vi: set ft=ruby :

$common = <<SCRIPT

# Set it to a particular version (for example, 1.27.5) or latest (to install the latest available)
# For example, K8SVER='1.27.5' or K8SVER='latest' (which will translate for example to 1.28.3)
# This is applicable to versions from v1.24.0 onwards

K8SVER='1.27.5'

# DO NOT EDIT BELOW THIS LINE

echo "* Specified version is $K8SVER"

if [ $K8SVER == 'latest' ]; then
	K8SVER=$(curl -sSL https://dl.k8s.io/release/stable.txt | tr -d 'v')
fi

K8SBRANCH=$(echo $K8SVER | cut -d '.' -f1,2)

echo "... working with $K8SVER version from $K8SBRANCH branch."

echo $K8SBRANCH > /tmp/k8s-branch
echo $K8SVER > /tmp/k8s-version

echo '* Load br_netfilter on boot ...'
modprobe br_netfilter
echo br_netfilter >> /etc/modules-load.d/k8s.conf

echo '* Adjust network-related settings and apply them ...'
cat << EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
sysctl --system

echo '* Install iptables and switch it to legacy version ...'
apt-get update && apt-get install -y iptables
update-alternatives --set iptables /usr/sbin/iptables-legacy

echo '* Turn off the swap ...'
swapoff -a
sed -i '/swap/ s/^/#/' /etc/fstab

echo '* Add hosts ...'
echo '192.168.99.101 node1.k8s.lab node1' >> /etc/hosts
echo '192.168.99.102 node2.k8s.lab node2' >> /etc/hosts
echo '192.168.99.103 node3.k8s.lab node3' >> /etc/hosts

echo '* Install other required packages ...'
apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release

echo '* Download and install the Docker repository key ...'
curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo '* Add the Docker repository ...'
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

echo '* Install the required container runtime packages ...'
apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io

echo '* Add vagrant user to docker group ...'
usermod -aG docker vagrant

echo '* Download and install the Kubernetes repository key ...'
curl -fsSL https://pkgs.k8s.io/core:/stable:/v${K8SBRANCH}/deb/Release.key | gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg

echo '* Add the Kubernetes repository ...'
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v${K8SBRANCH}/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list

echo "* Install the selected ($K8SVER) version ..."
apt-get update && apt-get install -y kubelet=${K8SVER}* kubeadm=${K8SVER}* kubectl=${K8SVER}*

echo '* Exclude the Kubernetes packages from being updated ...'
apt-mark hold kubelet kubeadm kubectl

echo '* Adjust containerd configuration ...'
cp /etc/containerd/config.toml /etc/containerd/config.toml.bak
containerd config default | tee /etc/containerd/config.toml > /dev/null
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
sed -i 's/pause:3.6/pause:3.9/g' /etc/containerd/config.toml
systemctl restart containerd

SCRIPT


$k8scp = <<SCRIPT 

K8SVER=$(cut -d - -f 1 /tmp/k8s-version)

echo "* Initialize Kubernetes cluster ..."
kubeadm init --kubernetes-version=$K8SVER --apiserver-advertise-address=192.168.99.101 --pod-network-cidr 10.244.0.0/16 --token abcdef.0123456789abcdef

echo "* Save the hash to a file ..."
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //' > /vagrant/hash.txt

echo "* Copy configuration for root ..."
mkdir -p /root/.kube
cp -i /etc/kubernetes/admin.conf /root/.kube/config
chown -R root:root /root/.kube

echo "* Copy configuration for vagrant ..."
mkdir -p /home/vagrant/.kube
cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
chown -R vagrant:vagrant /home/vagrant/.kube

# Pod Network plugin - comment/uncomment one of the following blocks
# Currently set to Calico

# echo "* Install Pod Network plugin (Flannel) ..."
# wget -q https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml -O /tmp/kube-flannel.yaml
# sed -i '/--kube-subnet-mgr/ a CHANGEME' /tmp/kube-flannel.yaml
# sed -i "s/CHANGEME/        - --iface=$(ip a | grep 192.168.99.101 | tr -s ' ' | cut -d ' ' -f 8)/" /tmp/kube-flannel.yaml 
# kubectl apply -f /tmp/kube-flannel.yaml

echo "* Install Pod Network plugin (Calico) ..."
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.3/manifests/tigera-operator.yaml
wget -q https://raw.githubusercontent.com/projectcalico/calico/v3.26.3/manifests/custom-resources.yaml -O /tmp/custom-resources.yaml
sed -i 's/192.168.0.0/10.244.0.0/g' /tmp/custom-resources.yaml
kubectl create -f /tmp/custom-resources.yaml

SCRIPT

$k8swk = <<SCRIPT

echo "* Join the worker node ..."
kubeadm join 192.168.99.101:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:`cat /vagrant/hash.txt`

SCRIPT

Vagrant.configure(2) do |config|
    
  config.ssh.insert_key = false

  config.vm.provider "virtualbox" do |v|
    v.memory = 2048
    v.cpus = 2
  end

  config.vm.define "node1" do |node1|
    node1.vm.box = "shekeriev/debian-11"
    node1.vm.hostname = "node1.k8s.lab"
    node1.vm.network "private_network", ip: "192.168.99.101"
    node1.vm.synced_folder "vagrant/", "/vagrant"
    node1.vm.provision "shell", inline: $common
    node1.vm.provision "shell", inline: $k8scp
  end

  config.vm.define "node2" do |node2|
    node2.vm.box = "shekeriev/debian-11"
    node2.vm.hostname = "node2.k8s.lab"
    node2.vm.network "private_network", ip: "192.168.99.102"
    node2.vm.synced_folder "vagrant/", "/vagrant"
    node2.vm.provision "shell", inline: $common
    node2.vm.provision "shell", inline: $k8swk
  end

  config.vm.define "node3" do |node3|
    node3.vm.box = "shekeriev/debian-11"
    node3.vm.hostname = "node3.k8s.lab"
    node3.vm.network "private_network", ip: "192.168.99.103"
    node3.vm.synced_folder "vagrant/", "/vagrant"
    node3.vm.provision "shell", inline: $common
    node3.vm.provision "shell", inline: $k8swk
  end
end
